
'use strict';
var path = require('path');
var helper = require('./helper.js');
var logger = helper.getLogger('taxFormTx');
var invoke = require('./invoke-transaction.js');

//const mime = require('mime-types');
//const crypto = require('crypto');

var fs = require("fs");
const uuidv4 = require('uuid/v4');
//const base64 = require('base-64')


var taxForm = async function (peerNames, channelName, chaincodeName, args,fcn, username, org_name, res) {
   // logger.debug(">>> taxForm() ...");
    res.set('Content-Type', 'application/json');
	// res.set('Accept', 'application/json');
	
	
 // **** To get file from local filesystem *********************************
	
	
	//let imageName = args.doc.docName
	
	//var bitmap = fs.readFileSync( __dirname + '/../uploads/'+imageName);
    // convert binary data to base64 encoded string
   // var pdf_encode = new Buffer(bitmap).toString('base64');
	//args.doc.docData = pdf_encode
	//console.log(args.doc.docData)
	
	
//**************************************************************************	
	
	//*******************************************
	
	args.taxDocId = uuidv4().toString();
	args.doc.docID = uuidv4().toString();
	args.accDoc.docID = uuidv4().toString();
	
	
	//*********************************
	let jsonArr = [];
	 
	 jsonArr.push(args.taxDocId);
	 jsonArr.push(args.taxType);
	 jsonArr.push(args.taxState);
	 jsonArr.push(args.taxCountry);
	 jsonArr.push(args.taxJurisdiction);
	 jsonArr.push(args.effectDate);
	 jsonArr.push(args.expDate);
	 jsonArr.push(args.createDate);
	 jsonArr.push(args.updateDate);
	 jsonArr.push(args.docStatus);
	 jsonArr.push(args.docOwner);
	 jsonArr.push(args.docIssuerComp);
	 jsonArr.push(args.partner);
	 jsonArr.push(args.partnerApprover);
	 jsonArr.push(args.expReminder);
	 jsonArr.push(args.certExempType);
	 jsonArr.push(args.certName);
	 jsonArr.push(JSON.stringify(args.accountList));
	 jsonArr.push(JSON.stringify(args.doc));
	 jsonArr.push(JSON.stringify(args.accDoc));
	 jsonArr.push(args.comments);
	 
	 //console.log(jsonArr);
	
	//***************************************
	
   
   
   
 // ***************** To encrypt base-64 string ***************************  
 
	//let base64Image = item.docImage
   // item.docOwner = username;
   // item.aesKey = crypto.randomBytes(32).toString('base64');
    //item.docImage = helper.encrypt(base64Image, item.aesKey);
 //**************************************************************************

 
   
    //logger.debug(">>> taxForm() : args: %s", jsonArr);
	let data ; 
	try {
	 data = await invoke.invokeChaincode(peerNames, channelName, chaincodeName, jsonArr, fcn, username, org_name);
	}	
	catch(err){
		console.log(err);
		//let errString = JSON.stringify(err);
		data = {
			"status":"500",
			"message":err
		};
		data = JSON.stringify(data);
	}
    if (data) {	
	let result;
	//	let result = data
	try {
		result = JSON.parse(data);
	}
	catch(error) {
		result = {
                        "status":"200",
                        "message":data
                };
	}	
		
       // result.docImage = helper.decrypt(result.docImage, result.aesKey);
        return result;
			
    } else {
        return 'Failed to invoke the transaction ! check the logs for the details';
    }
	
	 // create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded
    
}

var account = async function (peerNames, channelName, chaincodeName, args,fcn, username, org_name, res) {
	
	res.set('Content-Type', 'application/json');
	
	//args.acctId = uuidv4().toString();
	
	let jsonArr = [];
	 
	 jsonArr.push(args.acctId);
	 jsonArr.push(args.ban);
	 jsonArr.push(args.acctStatus);
	 jsonArr.push(args.billName);
	 jsonArr.push(args.acna);
	 jsonArr.push(args.aecn);
	 jsonArr.push(args.rsId);
	 jsonArr.push(args.naspId);
	 jsonArr.push(args.can);
	 jsonArr.push(args.state);
	 jsonArr.push(args.area);
	 jsonArr.push(args.billingSys);
	 jsonArr.push(args.prodGrpName);
	 jsonArr.push(args.srvcTyp);
	 jsonArr.push(args.lob);
	 jsonArr.push(args.lobDesc);
	 jsonArr.push(args.segment);
	 jsonArr.push(args.creationDate);
	 jsonArr.push(args.updateDate);
	 jsonArr.push(args.taxExemptAcctType);
	 jsonArr.push(args.taxExemptAcctVal);
	// jsonArr.push(JSON.stringify(args.prtnr));
	 jsonArr.push(args.prtnr.prtnrId);
	 jsonArr.push(args.prtnr.prtnrCode);
	 jsonArr.push(args.prtnr.prtnrName);
	 jsonArr.push(args.prtnr.fmGrp.fgId);
	 jsonArr.push(args.prtnr.fmGrp.fgCode);
	 jsonArr.push(args.prtnr.fmGrp.fgName); 
	 
	 let data = await invoke.invokeChaincode(peerNames, channelName, chaincodeName, jsonArr, fcn, username, org_name);
	 
	 
	 if (data) {	
	
		//let result = data
       // let result = JSON.parse(data);
		
       // result.docImage = helper.decrypt(result.docImage, result.aesKey);
        return data;
			
    } else {
        return 'Failed to invoke the transaction ! check the logs for the details';
    }
}

var invoice = async function (peerNames, channelName, chaincodeName, args,fcn, username, org_name, res) {
	
	res.set('Content-Type', 'application/json');
	let jsonArr = [];
	 
	 jsonArr.push(args.billId);
	 jsonArr.push(args.billNum);
	 jsonArr.push(args.accountBAN);
	 jsonArr.push(args.invoiceBAN);
	 jsonArr.push(args.billDate);
	 jsonArr.push(args.numOfCkts);
	 jsonArr.push(args.numOfOCCs);
	 jsonArr.push(args.billingSys);
	 jsonArr.push(args.totCurrCharges);
	 jsonArr.push(args.totTaxCharges);
	 jsonArr.push(args.totSurcharges);
	 jsonArr.push(args.totUsageCharges);
	 jsonArr.push(args.totOCCCharges);
	 jsonArr.push(args.totLPCCharges);
	 jsonArr.push(args.totMonthlyCharges);
	 jsonArr.push(args.totPayment);
	 jsonArr.push(args.totAdj);
	 jsonArr.push(args.totDebitAdj);
	 jsonArr.push(args.totAmountDue);
	 jsonArr.push(args.totBalanceDue);
	 jsonArr.push(args.typeOfBill);
	 jsonArr.push(JSON.stringify(args.taxSurList));
	 
	 let data = await invoke.invokeChaincode(peerNames, channelName, chaincodeName, jsonArr, fcn, username, org_name);
	 
	 
	 if (data) {	
	
		//let result = data
        //let result = JSON.parse(data);
		
       // result.docImage = helper.decrypt(result.docImage, result.aesKey);
        return data;
			
    } else {
        return 'Failed to invoke the transaction ! check the logs for the details';
    }
	 
}


var claim = async function (peerNames, channelName, chaincodeName, args,fcn, username, org_name, res) {
	
	res.set('Content-Type', 'application/json');
	
	//args.batchID = uuidv4().toString();
	let jsonArr = [];
	 
	 jsonArr.push(JSON.stringify(args.claimDtls));
	 jsonArr.push(args.claimDate);
	 jsonArr.push(args.prtnrName);
	 jsonArr.push(args.submittedByVZ);
	 jsonArr.push(args.batchID);
	 jsonArr.push(args.fileName);
	 jsonArr.push(args.claimsExcel);
	 
	 console.log(jsonArr);
	
	let data; 
	try {
	 	data = await invoke.invokeChaincode(peerNames, channelName, chaincodeName, jsonArr, fcn, username, org_name);
	 }
	catch(err) {
		data = {
			"status": "500",
			"message": err
		}
	}
	 
	 if (data) {	
		
        	return data;	
       // result.docImage = helper.decrypt(result.docImage, result.aesKey);
       // return data;
			
    } else {
        return 'Failed to invoke the transaction ! check the logs for the details';
    }
	 
} 


exports.taxForm = taxForm;
exports.account=account;
exports.invoice=invoice;
exports.claim=claim;
